#+title: Ist Sos

* PROJ sensorthings_nuxt

** GOALS of istSOS
*** who is using it
**** show different fields and metadata
**** monitoring solutions
**** manager of the networks
**** consumder of the datastreams
**** analytical ( grafana plugin  )
**** to create dashboards
***** update sensors , update metadata
**** edit the time series, time series calculator
***** interpolation in time
*** STAC injesting data from a STAC solution
**** extracted to istSOS4

** TODO Pinia istSOS model
*** STRT build app domain
** HOLD Pinia ORM istSOS
*** WAIT ORM utility integrations
** TODO Test Development
*** HOLD Test SensorThings API ORM
*** HOLD Test SensorThings Registration
** TODO DaisyUI istSOS administration
*** HOLD integrate domain istSOS use cases
**** WAIT SensorThings Registration
**** WAIT SensorThings API Map
**** WAIT Visual Analytics
** WAIT Mapping framework design
[[https:https://developers.sensorup.com/tutorials/map/part-04/][SensorUP tutorials for SensorThings API]]
** TODO Integrate tailwind-variants
** TODO Custom MCP istSOS Server


SCHEDULED: <2025-06-02 Mon>
** IDEA CLEAN Nuxt Architecture
- Document architecture and optional design patterns
** IDEA Nuxt Layers
- Siloing files by domain
   - Transposing physical locations benefits self-contained file mgmt, discrete domain config, and downstream developer experience
   - The root-level nuxt.config.ts combines layers via //unjs/c12's// extends keyword:

        #+begin_src typescript
   export default defineNuxtConfig({
     extends: [
       './base',
       './blog',
       './home',
     ]
   })
        #+end_src

   - The //unjs/c12's// extends keyword can use a git repo to share my Nuxt layer:
             #+begin_src typescript
     export default defineNuxtConfig({
       extends: [
         'github:username/repoName',        // GitHub Remote Source
         'github:username/repoName/base',   // GitHub Remote Source within /base directory
         'github:username/repoName#dev',    // GitHub Remote Source from dev branch
         'github:username/repoName#v1.0.0', // GitHub Remote Source from v1.0.0 tag
         'gitlab:username/repoName',        // GitLab Remote Source example
         'bitbucket:username/repoName',     // Bitbucket Remote Source example
       ]
     })
             #+end_src
     - _If you want to extend a private remote source, you need to add the environment variable_ **GIGET_AUTH=<token>** _to provide a token._
     - _If you want to extend a remote source from a self-hosted GitHub or GitLab instance, you need to supply its URL with the_ **GIGET_GITHUB_URL=<url>** or **GIGET_GITLAB_URL=<url>** _environment variable - or directly configure it with the auth option in your nuxt.config._
     - I can publish Nuxt layers as **npm package** that contains the files and dependencies you want to extend.
     - When importing using global aliases (such as ~/ and @/) in a layer components and composables, note that these aliases are resolved relative to the user's project paths.
       - use relative paths or named layer aliases to import them instead.
     - When using relative paths in /nuxt.config/ file of a layer (with the exception of nested /extends/) they are resolved relative to user's project instead of the layer.
     - use full resolved paths in /nuxt.config/
           #+begin_src typescript
  import { fileURLToPath } from 'url'
  import { dirname, join } from 'path'

  const currentDir = dirname(fileURLToPath(import.meta.url))

  export default defineNuxtConfig({
    css: [
      join(currentDir, './assets/main.css')
    ]
  })

           #+end_src


 - A minimal Nuxt layer directory should contain a nuxt.config.ts file to indicate it is a layer.
   - Additionally, certain other files in the layer directory will be auto-scanned and used by Nuxt for the project extending this layer.
     - components/* - Extend the default components
     - composables/* - Extend the default composables
     - layouts/* - Extend the default layouts
     - pages/* - Extend the default pages
     - plugins/* - Extend the default plugins
     - server/* - Extend the default server endpoints & middleware
     - utils/* - Extend the default utils
     - nuxt.config.ts- Extend the default nuxt config
     - app.config.ts - Extend the default app config

  FOLDER            CONFIG           NOTES
+----------------+----------------+----------------+
| components     |  components    |  auto-imported |
|                |                |                |
+----------------+----------------+----------------+
| composables    | imports^       |  auto-imported |
|                |                |                |
+----------------+----------------+----------------+
| layouts        |                |  auto-imported |
|                |                |                |
+----------------+----------------+----------------+
| pages          | pages^         | generates      |
|                |                | routes         |
+----------------+----------------+----------------+
| plugins        | plugins^       | auto-registered|
|                |                |                |
+----------------+----------------+----------------+
| public         | dir.public^    | copied to      |
|                |                |  /./output/    |
+----------------+----------------+----------------+
| server         | serverDir^     | adds middleware|
|                |                |,api routes,...,|
+----------------+----------------+----------------+
| utils          | imports^       | auto-imported  |
|                |                |                |
+----------------+----------------+----------------+
| nuxt.config.ts |                | config merged  |
|                |                | nuxt.config.ts |
+----------------+----------------+----------------+
| app.config.ts  |                | config merged  |
|                |                | nuxt.config.ts |
+----------------+----------------+----------------+

**Core Folders**

/assets(opens new window)
/layouts(opens new window)
/middleware(opens new window)
/modules(opens new window)
/pages(opens new window)
/plugins(opens new window)
/public(opens new window)

_Can be moved to layers via Nuxt's dir config settings_

#+begin_src typescript
// src/nuxt.config.ts
export default defineNuxtConfig({
  dir: {
    // core
    assets: 'core/assets',
    modules: 'core/modules',
    middleware: 'core/middleware',
    plugins: 'core/plugins',

    // site
    layouts: 'layers/site/layouts',
    pages: 'layers/site/pages',
    public: 'layers/site/public',
  },
})
#+end_src

**Pages and Routes**

- Layers can happily contain their own pages and define navigable routes.
  - However, any pages folder must contain full folder paths - as the layer name is not automatically prepended.

**Components**

- Nuxt's default auto-import settings do scan components folder recursively:
  - top-level components import using their given names
  - nested components are prefixed with the path's segments

    components                      Dropdown.vue	Dropdown.vue
    components/form	        Dropdown.vue	FormDropdown.vue
    components/form/options	Dropdown.vue	FormOptionsDropdown.vue
    components/form/options	DropdownItem.vue	FormOptionsDropdownItem.vue

- _To customize Nuxt's defaults_

  #+begin_src typescript
// src/nuxt.config.ts
export default defineNuxtConfig({
  components: [
    // use defaults: use path prefix
    '~/core/components',

    // override defaults: no path prefix
    { path: '~/layers/site/components', pathPrefix: false },

    // override defaults: no path prefix, register all globally (for Nuxt Content)
    { path: '~/layers/blog/components', pathPrefix: false, global: true },
  ]
})

// Note that components config can reconfigure existing folders (useful in layers):
// src/layers/site/nuxt.config.ts
export default defineNuxtConfig({
  components: [
    { path: 'components', pathPrefix: false },
  ]
})

//You can also disable component auto-import(opens new window) entirely, including any default components folder:
// root or layer nuxt.config.ts
export default defineNuxtConfig({
  components: []
})
  #+end_src



**Auto-imports**

- The composable/ directory is used to auto-import your Vue composables into your application.
- the utils/ directory to auto-import your utility functions throughout your application.

  _What is a "Composable"?_
  - In the context of Vue, a "composable" is a function that leverages the composition API to encapsulate and reuse stateful logic.
    - we often reuse logic for common tasks, we can extract a reusable function encapsulating stateless logic
    - stateful logic involves managing state that changes over time.
  - To add additional folders in composables, add them to the imports.dirs config
    #+begin_src typescript
// src/nuxt.config.ts
export default defineNuxtConfig({
  imports: {
    dirs: [
      // add core services
      'core/services',

      // add specific files in core composables in subfolders
      'core/composables/**/*.{ts,js,mjs,mts}',

      // autoload all stores in all layers
      '**/stores'
    ]
  }
})

// You can also disable any auto-importing(opens new window)
// but then you lose the benefit of
//importing the boring stuff:

export default defineNuxtConfig({
  imports: {
    autoImport: false
  }
})
    #+end_src


**Nuxt Content**

        **Local Sources**
        - you can have more than one content source
          - you may silo domain-specific content along with its related pages, components, etc.

        - unlike pages, you can configure content without re-nesting the folder:
          #+begin_src typescript
// src/blog/nuxt.config.ts
export default defineNuxtConfig({
  content: {
    sources: {
      blog: {
        prefix: '/blog',
        base: './blog/content', // referenced from root
        driver: 'fs',
      }
    }
  }
})
          #+end_src

          **Remote sources**
          #+begin_src typescript
// src/blog/nuxt.config.ts
export default defineNuxtConfig({
  content: {
    sources: {
      blog: {
        prefix: `/blog`,
        dir: 'content',
        repo: '<owner>/<repo>',
        branch: 'main',
        driver: 'github',
      }
    }
  }
})

# .env
GH_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

export default defineNuxtConfig({
  extends: [
    ['gh:<owner>/<repo>', { giget: { auth: process.env.GH_TOKEN }}]
  ]
})
          #+end_src


**Tailwind**
- Nuxt’s Tailwind module does not pick up layers.
#+begin_src typescript
// tailwind.config.ts
export default {
  content: [
    './core/components/**/*.vue',
    './layers/**/pages/**/*.vue',
    './layers/**/components/**/*.vue',
    ...
	],
  ...
}
#+end_src

**Config**
- where to locate each file
  - what each file should contain
    - how to correctedly resolve paths
      - keeping code clean

        **Layer configs**
         #+begin_src typescript
// src/blog/nuxt.config.ts
export default defineNuxtConfig({
  modules: [
    'markdown-tools'
  ],
  markdownTools: {
    ...
  }
})
        #+end_src

        **Path resolution**
        #+begin_src typescript
export default {
  foo: resolve('../some-folder'),
  bar: 'some-layer/some-folder',
  baz: '~/other-layer',
  qux: './other-layer',
}
        #+end_src



**Imports and Exports**
