#+title: istSOS Nuxt

* PROJ sensorthings_nuxt

** GOALS of istSOS
*** who is using it
**** show different fields and metadata
**** monitoring solutions
**** manager of the networks
**** consumder of the datastreams
**** analytical ( grafana plugin  )
**** to create dashboards
***** update sensors , update metadata
**** edit the time series, time series calculator
***** interpolation in time
*** STAC injesting data from a STAC solution
**** extracted to istSOS4

** STRT Pinia istSOS model
*** STRT build app domain
** HOLD Pinia ORM istSOS
*** WAIT ORM utility integrations
Analogy:
Think of it like this:

FastAPI + SQLAlchemy + GeoAlchemy + o-data-query: This is your Chef in the kitchen. They understand the recipe (STA), know how to get ingredients from the pantry (PostGIS), prepare the dish (process OData query, fetch data), and serve it on a plate (JSON).
Nuxt + Pinia + Pinia ORM: This is your Dining Room Manager and Display Cases. They receive the prepared dishes from the chef (JSON), organize them neatly in their display cases (Pinia ORM store), allow customers to browse and select what they want to see (client-side queries), and present it beautifully (Vue components). The Dining Room Manager doesn't go to the kitchen to fetch ingredients; they just deal with what the Chef serves.
*** STRT Pinia ORM Axios Plugin
 minimal plugin setup
 #+begin_src typescript
import { createPiniaOrmAxios } from '@pinia-orm/axios'
import type { PiniaPluginContext } from 'pinia'
import { createORM } from 'pinia-orm'
import axios from 'axios'

function ProperPiniaPlugin({ store }: PiniaPluginContext) {
  store.$subscribe((mutation) => {
    // react to store changes
    console.log(`[🍍 ${mutation.storeId}]: ${mutation.type}.`)
  })

  // Note this has to be typed
  return { creationTime: new Date() }
}

export default defineNuxtPlugin(({ $pinia }) => {
  $pinia.use(createORM({
    plugins: [
      createPiniaOrmAxios({
        axios,
      }),
    ],
  }))
  $pinia.use(ProperPiniaPlugin)
})
 #+end_src

 - Pinia ORM axios plugin can be configured:
   1. _Globally_ - options can be defined during installation
   2. _Model_ - options can be defined on a per-model basis
   3. _Request_ - options can be defined on a per-request basis

      - Custom Actions enables predefined api methods through the /actions/ option.
#+begin_src typescript
class User extends Model {
  static entity = 'users'

  static fields () {
    return {
      id: this.attr(null),
      name: this.attr('')
    }
  }

  static config = {
    axiosApi: {
      actions: {
        fetch: {
          method: 'get',
          url: '/api/users'
        },
        fetchById (id) {
            return this.get(`api/users/${id}`)
        }
      }
    }
  }
}

// now we have defined fetch that may be called
useAxiosRepo(User).api().fetch()
// or
useAxiosRepo(User).api().fetchById(1)
#+end_src
- the simpler way and better with type safety is to extend /AxiosRepository<ORMModel>/
  #+begin_src typescript
class UserRepository extends AxiosRepository<User> {
  static fetchById (id) {
    return this.api().get(`/api/users/${id}`)
  }
}

// called from the repo and not api
useAxiosRepo(User).fetchById(1)
  #+end_src

   - dataTransformer option
     This option will let you intercept and transform the response before persisting it to the store.
     #+begin_src typescript
useAxiosRepo(User).api().get('/api/users', {
  dataTransformer: ({ data, headers }) => {
    // Do stuff with headers...
    // Do stuff with data...

    return data
  }
})
     #+end_src
** TODO Test Development
*** HOLD Test SensorThings API ORM
*** HOLD Test SensorThings Registration
** TODO DaisyUI istSOS administration
*** HOLD integrate domain istSOS use cases
**** WAIT SensorThings Registration
**** WAIT SensorThings API Map
**** WAIT Visual Analytics
** WAIT Mapping framework design
[[https:https://developers.sensorup.com/tutorials/map/part-04/][SensorUP tutorials for SensorThings API]]
** TODO Integrate tailwind-variants
** TODO Custom MCP istSOS Server


SCHEDULED: <2025-06-02 Mon>
** IDEA CLEAN Nuxt Architecture
- Document architecture and optional design patterns
*** Dependency Injection
- When is it not appropriate to usse DI?
  - DI makes assumptions about the nature of your objects, if those are wrong then DI may not be a good solution
    1. _DI ASSUMES TIGHT COUPLING OF OBJECT IMPLEMENTATIONS IS ALWAYS BAD_
    2. _DI ASSUMES THAT THE DEPENDENT CLASS IS NEVER A GOOD PLACE TO CREATE A DEPENDENCY_
    3. _DI BY ITS NATURE CENTRALIZES KNOWLEDGE OF ALL DEPENDENCIES AND THEIR IMPLEMENTATIONS_

       - When a dependency-injection framework is added,
         - you lose the ability to know what implementations you are relying on by injecting a dependency,
           - and shifting the responsibility for deciding what dependency you are relying on to some automated resolution process, or to some high level configuration file that prescribes what provider should be used for each resource, or a hybrid of the two.
             - for example, there may be an automated resolution for dependencies that can be overriden like in nuxt.config.ts you can disable autoImports
         - As for constructor injection, the advantage is you don't have to know the preferred order to check for providers in because it is handled at a high-level by DI platform.
*** Factory Class
- If you are creating database entities, you should rather have some factory class which you will inject instead to your controller

** IDEA Nuxt Layers
- Siloing files by domain
   - Transposing physical locations benefits self-contained file mgmt, discrete domain config, and downstream developer experience
   - The root-level nuxt.config.ts combines layers via //unjs/c12's// extends keyword:

        #+begin_src typescript
   export default defineNuxtConfig({
     extends: [
       './base',
       './blog',
       './home',
     ]
   })
        #+end_src

   - The //unjs/c12's// extends keyword can use a git repo to share my Nuxt layer:
             #+begin_src typescript
     export default defineNuxtConfig({
       extends: [
         'github:username/repoName',        // GitHub Remote Source
         'github:username/repoName/base',   // GitHub Remote Source within /base directory
         'github:username/repoName#dev',    // GitHub Remote Source from dev branch
         'github:username/repoName#v1.0.0', // GitHub Remote Source from v1.0.0 tag
         'gitlab:username/repoName',        // GitLab Remote Source example
         'bitbucket:username/repoName',     // Bitbucket Remote Source example
       ]
     })
             #+end_src
     - _If you want to extend a private remote source, you need to add the environment variable_ **GIGET_AUTH=<token>** _to provide a token._
     - _If you want to extend a remote source from a self-hosted GitHub or GitLab instance, you need to supply its URL with the_ **GIGET_GITHUB_URL=<url>** or **GIGET_GITLAB_URL=<url>** _environment variable - or directly configure it with the auth option in your nuxt.config._
     - I can publish Nuxt layers as **npm package** that contains the files and dependencies you want to extend.
     - When importing using global aliases (such as ~/ and @/) in a layer components and composables, note that these aliases are resolved relative to the user's project paths.
       - use relative paths or named layer aliases to import them instead.
     - When using relative paths in /nuxt.config/ file of a layer (with the exception of nested /extends/) they are resolved relative to user's project instead of the layer.
     - use full resolved paths in /nuxt.config/
           #+begin_src typescript
  import { fileURLToPath } from 'url'
  import { dirname, join } from 'path'

  const currentDir = dirname(fileURLToPath(import.meta.url))

  export default defineNuxtConfig({
    css: [
      join(currentDir, './assets/main.css')
    ]
  })

           #+end_src


 - A minimal Nuxt layer directory should contain a nuxt.config.ts file to indicate it is a layer.
   - Additionally, certain other files in the layer directory will be auto-scanned and used by Nuxt for the project extending this layer.
     - components/* - Extend the default components
     - composables/* - Extend the default composables
     - layouts/* - Extend the default layouts
     - pages/* - Extend the default pages
     - plugins/* - Extend the default plugins
     - server/* - Extend the default server endpoints & middleware
     - utils/* - Extend the default utils
     - nuxt.config.ts- Extend the default nuxt config
     - app.config.ts - Extend the default app config

  FOLDER            CONFIG           NOTES
+----------------+----------------+----------------+
| components     |  components    |  auto-imported |
|                |                |                |
+----------------+----------------+----------------+
| composables    | imports^       |  auto-imported |
|                |                |                |
+----------------+----------------+----------------+
| layouts        |                |  auto-imported |
|                |                |                |
+----------------+----------------+----------------+
| pages          | pages^         | generates      |
|                |                | routes         |
+----------------+----------------+----------------+
| plugins        | plugins^       | auto-registered|
|                |                |                |
+----------------+----------------+----------------+
| public         | dir.public^    | copied to      |
|                |                |  /./output/    |
+----------------+----------------+----------------+
| server         | serverDir^     | adds middleware|
|                |                |,api routes,...,|
+----------------+----------------+----------------+
| utils          | imports^       | auto-imported  |
|                |                |                |
+----------------+----------------+----------------+
| nuxt.config.ts |                | config merged  |
|                |                | nuxt.config.ts |
+----------------+----------------+----------------+
| app.config.ts  |                | config merged  |
|                |                | nuxt.config.ts |
+----------------+----------------+----------------+

**Core Folders**

_/assets_ is used to add all the website's assets that the build tool will process.
- usually contains stylesheets, fonts, images
  - if you want to serve assets from the server, use _public_ directory

/layouts provides a layouts framework to extract common UI patterns into reusable layouts

#+begin_src html
<template>
  <NuxtLayout>
    <NuxtPage />
  </NuxtLayout>
</template>
#+end_src
- to set a _layout_ property in your page, use /definePageMeta/
  - _definePageMeta_ is a compiler macro to set page component metadata

- Given named layout
  -| layouts/
        ---| default.vue
        ---| custom.vue
- you can use custom layout in your page
  #+begin_src typescript
<script setup lang="ts">
definePageMeta({
  layout: 'custom'
})
</script>

  #+end_src
- you can also directly override the default layout for all pages using the name property
  #+begin_src typescript
<script setup lang="ts">
// You might choose this based on an API call or logged-in status
const layout = "custom";
</script>

<template>
  <NuxtLayout :name="layout">
    <NuxtPage />
  </NuxtLayout>
</template>

  #+end_src
- changing the layout dynamically uses the /setPageLayout/ helper
  #+begin_src typescript
<script setup lang="ts">
function enableCustomLayout () {
  setPageLayout('custom')
}
definePageMeta({
  layout: false,
});
</script>

<template>
  <div>
    <button @click="enableCustomLayout">Update layout</button>
  </div>
</template>

  #+end_src
_If you use <NuxtLayout> within your pages, make sure it is not the root element_

example below:
- key can be function
  - keepalive makes sure a component is not cached on switching components
    - pageType as a custom property
#+begin_src typescript
<script setup lang="ts">
definePageMeta({
  key: (route) => route.fullPath,

  keepalive: {
    exclude: ['modal']
  },

  pageType: 'Checkout'
})
</script>

#+end_src
example below:
- middleware can be defined using a function directly within /definePageMeta/ or set as a string that matches the middleware file name located in teh /middleware/ directory
  #+begin_src typescript
<script setup lang="ts">
definePageMeta({
  // define middleware as a function
  middleware: [
    function (to, from) {
      const auth = useState('auth')

      if (!auth.value.authenticated) {
          return navigateTo('/login')
      }

      if (to.path !== '/checkout') {
        return navigateTo('/checkout')
      }
    }
  ],

  // ... or a string
  middleware: 'auth'

  // ... or multiple strings
  middleware: ['auth', 'another-named-middleware']
})
</script>

  #+end_src
example below:
- a customer regex exp can resolve conflicts between overlapping routes
#+begin_src typescript

// pages/[postId]-[postSlug].vue

<script setup lang="ts">
definePageMeta({
  path: '/:postId(\\d+)-:postSlug'
})
</script>
#+end_src

- You can define the layout that matches the layout's file name located (by default) in the /layouts/ directory.
  #+begin_src typescript
<script setup lang="ts">
definePageMeta({
  // set custom layout
  layout: 'admin'

  // ... or disable a default layout
  layout: false
})
</script>
  #+end_src

_/middleware_ nuxt provides customizable route middleware framework, used for extracting code that you want to run before navigating to a specific route.
        1. Anonymous (or inline) route middleware defined in the page
        2. Named route middlware, placed in /middleware/ directory, loaded via asynchronous import when used on a page.
        3. Global route middleware, placed in the /middleware/ directory with a /.global/ suffix and is run on every route change.

Nuxt provides two global helpers returned directly from the middleware
- _navigateTo_ redirects to the given route
- _abortNavigation_ aborts the navigation, with an optional error message

  - possible return values are:
    - a simple **return** or no return at all
    - **return navigateTo('/')** redirects to given path and will set code to /302:Found/
    - **return navigateTo('/', { redirectCode: 301 })** redirects to given path and set code to /301:Moved Permanently/
    - **return abortNavigation()** stops the current navigation
    - **return abortNavigation(error)** rejects the current navigation with an error

- _Middlware Order_ runs in respect to => Global Middlware => Page defined middlware

  example:
  -| middleware/
        ---| analytics.global.ts
        ---| setup.global.ts
        ---| auth.ts
  #+begin_src typescript
<script setup lang="ts">
definePageMeta({
  middleware: [
    function (to, from) {
      // Custom inline middleware
    },
    'auth',
  ],
});
</script>
  #+end_src

  1. analytics.global.ts
     2. setup.global.ts
        3. custom inline middleware
           4. auth.ts
        - global middleware is alphabetically based on filename but to define a specific order:
          -| middleware/
                ---| 01.setup.global.ts
                ---| 02.analytics.global.ts
                ---| auth.ts


_/modules_ is used to automatically register local modules within your application
- modules first executed are the ones defined in nuxt.config.ts
  - the modules that are found in the /modules/ directory are then executed in alphabetical order
  You can change the order of local module by adding a number to the front of each directory name:
#+begin_src typescript
modules/
  1.first-module/
    index.ts
  2.second-module.ts
#+end_src

_/pages_ nuxt will automatically create a route for every page in your /pages/ directory
- /pages/index.vue file will be mapped to the / route of app
  - make sure to use <NuxtPage/> component to display current page
        **Dynamic Routes**
        - anything in square brackets is turned into a dynamic route parameter
          #+begin_src typescript
// ~/pages/[[slug]]/index.vue or ~/pages/[[slug]].vue will match both / and /test
//
// dir structure
-| pages/
---| index.vue
---| users-[group]/
-----| [id].vue
          #+end_src
          - you can access group/id within your component via the /$route/ object
        #+begin_src typescript
// pages/users-[group]/[id].vue
<template>
  <p>{{ $route.params.group }} - {{ $route.params.id }}</p>
</template>
        #+end_src
        - navigating to /user-admins/123 would render
          #+begin_src typescript
<template>
  <p>{{ $route.params.group }} - {{ $route.params.id }}</p>
</template>
          #+end_src
/plugins(opens new window)
/public(opens new window)

**More Folders**
_/shared_ allows you to share code that can be used in both the Vue app and the Nitro (Deno preset) server

| folder  | config                                          | notes         |
|---+--                                                               -+--- |
| shared  | only the files in shared/utils and shared/types | auto-imported |


_Can be moved to layers via Nuxt's dir config settings_

#+begin_src typescript
// src/nuxt.config.ts
export default defineNuxtConfig({
  dir: {
    // core
    assets: 'core/assets',
    modules: 'core/modules',
    middleware: 'core/middleware',
    plugins: 'core/plugins',

    // site
    layouts: 'layers/site/layouts',
    pages: 'layers/site/pages',
    public: 'layers/site/public',
  },
})
#+end_src

**Pages and Routes**

- Layers can happily contain their own pages and define navigable routes.
  - However, any pages folder must contain full folder paths - as the layer name is not automatically prepended.

**Components**

- Nuxt's default auto-import settings do scan components folder recursively:
  - top-level components import using their given names
  - nested components are prefixed with the path's segments

    components                      Dropdown.vue	Dropdown.vue
    components/form	        Dropdown.vue	FormDropdown.vue
    components/form/options	Dropdown.vue	FormOptionsDropdown.vue
    components/form/options	DropdownItem.vue	FormOptionsDropdownItem.vue

- _To customize Nuxt's defaults_

  #+begin_src typescript
// src/nuxt.config.ts
export default defineNuxtConfig({
  components: [
    // use defaults: use path prefix
    '~/core/components',

    // override defaults: no path prefix
    { path: '~/layers/site/components', pathPrefix: false },

    // override defaults: no path prefix, register all globally (for Nuxt Content)
    { path: '~/layers/blog/components', pathPrefix: false, global: true },
  ]
})

// Note that components config can reconfigure existing folders (useful in layers):
// src/layers/site/nuxt.config.ts
export default defineNuxtConfig({
  components: [
    { path: 'components', pathPrefix: false },
  ]
})

//You can also disable component auto-import(opens new window) entirely, including any default components folder:
// root or layer nuxt.config.ts
export default defineNuxtConfig({
  components: []
})
  #+end_src



**Auto-imports**

- The composable/ directory is used to auto-import your Vue composables into your application.
- the utils/ directory to auto-import your utility functions throughout your application.

  _What is a "Composable"?_
  - In the context of Vue, a "composable" is a function that leverages the composition API to encapsulate and reuse stateful logic.
    - we often reuse logic for common tasks, we can extract a reusable function encapsulating stateless logic
    - stateful logic involves managing state that changes over time.
  - To add additional folders in composables, add them to the imports.dirs config
    #+begin_src typescript
// src/nuxt.config.ts
export default defineNuxtConfig({
  imports: {
    dirs: [
      // add core services
      'core/services',

      // add specific files in core composables in subfolders
      'core/composables/**/*.{ts,js,mjs,mts}',

      // autoload all stores in all layers
      '**/stores'
    ]
  }
})

// You can also disable any auto-importing(opens new window)
// but then you lose the benefit of
//importing the boring stuff:

export default defineNuxtConfig({
  imports: {
    autoImport: false
  }
})
    #+end_src

        **Pinia Auto-Import**

        By default @pinia/nuxt exposes a few auto imports:

        usePinia(), which is similar to getActivePinia() but works better with Nuxt.
        defineStore() to define stores
        storeToRefs() when you need to extract individual refs from a store
        acceptHMRUpdate() for hot module replacement
        It also automatically imports all stores defined within your stores folder. It doesn't lookup for nested stores though. You can customize this behavior by setting the storesDirs option:
        #+begin_src typescript
// nuxt.config.ts
export default defineNuxtConfig({
  // ... other options
  modules: ['@pinia/nuxt'],
  pinia: {
    storesDirs: ['./stores/**', './custom-folder/stores/**'],
  },
})
        #+end_src

**Nuxt Content**

        **Local Sources**
        - you can have more than one content source
          - you may silo domain-specific content along with its related pages, components, etc.

        - unlike pages, you can configure content without re-nesting the folder:
          #+begin_src typescript
// src/blog/nuxt.config.ts
export default defineNuxtConfig({
  content: {
    sources: {
      blog: {
        prefix: '/blog',
        base: './blog/content', // referenced from root
        driver: 'fs',
      }
    }
  }
})
          #+end_src

          **Remote sources**
          #+begin_src typescript
// src/blog/nuxt.config.ts
export default defineNuxtConfig({
  content: {
    sources: {
      blog: {
        prefix: `/blog`,
        dir: 'content',
        repo: '<owner>/<repo>',
        branch: 'main',
        driver: 'github',
      }
    }
  }
})

# .env
GH_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

export default defineNuxtConfig({
  extends: [
    ['gh:<owner>/<repo>', { giget: { auth: process.env.GH_TOKEN }}]
  ]
})
          #+end_src


**Tailwind**
- Nuxt’s Tailwind module does not pick up layers.
#+begin_src typescript
// tailwind.config.ts
export default {
  content: [
    './core/components/**/*.vue',
    './layers/**/pages/**/*.vue',
    './layers/**/components/**/*.vue',
    ...
	],
  ...
}
#+end_src

**Config**
- where to locate each file
  - what each file should contain
    - how to correctedly resolve paths
      - keeping code clean

        **Layer configs**
         #+begin_src typescript
// src/blog/nuxt.config.ts
export default defineNuxtConfig({
  modules: [
    'markdown-tools'
  ],
  markdownTools: {
    ...
  }
})
        #+end_src

        **Path resolution**
        #+begin_src typescript
export default {
  foo: resolve('../some-folder'),
  bar: 'some-layer/some-folder',
  baz: '~/other-layer',
  qux: './other-layer',
}
        #+end_src



**Imports and Exports**
